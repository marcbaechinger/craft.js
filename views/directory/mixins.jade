mixin jsfile(file, idx)
	li.directory-item
		a.file(href="/#{context}/#{file.path}", title="#{file.size} bytes - #{file.mtime}") #{file.name}
		span.label #{file.size} bytes - #{file.mtime}
		label(for="plain-#{idx}") plaintext
			input.plain(id="plain-#{idx}", name="plain", type="checkbox")
			span(style="padding-left: 24px;") |
		if context === config.context.src
			label(for="expand-#{idx}") expand
				input.expand(id="expand-#{idx}", name="expand", type="checkbox")
		label(for="mangle-#{idx}")  mangle
			input.mangle(id="mangle-#{idx}", name="mangle", type="checkbox")
		label(for="squeeze-#{idx}")  squeeze
			input.squeeze(id="squeeze-#{idx}", name="squeeze", type="checkbox")
		label(for="minimize-#{idx}")  minimize
			input.minimize(id="minimize-#{idx}", name="minimize", type="checkbox")
		label(for="beautify-#{idx}")  beautify
			input.beautify(id="beautify-#{idx}", name="beautify", type="checkbox")
		span(style="padding-left: 24px;") |
		label(for="lint-#{idx}") lint
			input.lint(id="lint-#{idx}", name="lint", type="checkbox", checked="checked")
		button.btn.btn-mini.btn-primary(data-action="build", data-path="#{file.path}", style="margin-left: 12px;") transform
		if context === config.context.dist
			button.btn.btn-mini.btn-primary.transform(data-action="delete-file", data-path="#{file.path}") delete
		
mixin htmlfile(file, idx)
	li.directory-item
		a.file(href="/#{context}/#{file.path}?viewer=true", title="#{file.size} bytes - #{file.mtime}") #{file.name}
		span.label #{file.size} bytes - #{file.mtime}
		a(href="/#{context}/#{file.path}")
			button.btn.btn-mini.btn-primary.transform show

mixin qunitfile(file, idx)
	li.directory-item
		a.file(href="/#{context}/#{file.path}?viewer=true", title="#{file.size} bytes - #{file.mtime}") #{file.name}
		span.label #{file.size} bytes - #{file.mtime}
		a(href="/#{context}/#{file.path}")
			button.btn.btn-mini.btn-primary.transform in-browser
		a(href="/#{context}/#{file.path}?phantom=true")
			button.btn.btn-mini.btn-primary(data-action="test-phantom") phantom.js

mixin jobfile(file, idx)
	li.directory-item.job
		a.file(href="/#{context}/#{file.name}") #{file.name}
		button.btn.btn-mini.btn-primary(data-action="build-job", data-path="#{file.path}", style="margin-left: 12px;") build
		button.btn.btn-mini.btn-primary(data-action="delete-file", data-path="#{file.path}") delete

mixin jsonfile(file, idx)
	li.directory-item.json
		a.file(href="/#{context}/#{file.path}?viewer=true", title="#{file.size} bytes - #{file.mtime}") #{file.name}
		span.label #{file.size} bytes - #{file.mtime}

mixin binaryfile(file, idx)
	li.directory-item
		a.file(href="/#{context}/#{file.path}", title="#{file.size} bytes - #{file.mtime}") #{file.name}
		span.label #{file.size} bytes - #{file.mtime}
		a(href="/#{context}/#{file.path}")
			button.btn.btn-mini.btn-primary.transform in-browser
		a(href="/#{context}/#{file.path}?phantom=true")
			button.btn.btn-mini.btn-primary(data-action="test-phantom") phantom.js
			
mixin directory(file)
	li.directory-item
		a.file(href="/#{context}/#{file.path}")=file.name
			
mixin breadcrumb
	ul.breadcrumb.navbar-fixed-top(style="margin-top: -34px;", class="")
		li
			a(href="/#{context}/", style="text-decoration: none;") #{context}:
			span.divider /
		if typeof breadcrumb!=="undefined"
			each path, name in breadcrumb
				li
					a(href="/#{context}/#{path}")!= name
					span.divider /